<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
	<RootDir Condition="'$(teamcity_version)' == ''">$(MSBuildProjectDirectory)\..</RootDir>
	<RootDir Condition="'$(teamcity_version)' != ''">$(teamcity_build_checkoutDir)</RootDir>
	<BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">3.7.100</BUILD_NUMBER>
	<BuildTasksDll Condition="Exists('$(RootDir)/packages/SIL.BuildTasks.3.1.1/tools/SIL.BuildTasks.dll')">$(RootDir)/packages/SIL.BuildTasks.3.1.1/tools/SIL.BuildTasks.dll</BuildTasksDll>
	<BuildTasksDll Condition="!Exists('$(RootDir)/packages/SIL.BuildTasks.3.1.1/tools/SIL.BuildTasks.dll')">$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll</BuildTasksDll>
	<SILReleaseTasksProps>$(RootDir)/packages/SIL.ReleaseTasks.3.1.1/build/SIL.ReleaseTasks.props</SILReleaseTasksProps>
	<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
	<RestartBuild Condition="!Exists('$(BuildTasksDll)') Or !Exists('$(SILReleaseTasksProps)')">true</RestartBuild>
	<RestartBuild Condition="Exists('$(BuildTasksDll)') And Exists('$(SILReleaseTasksProps)')">false</RestartBuild>
  </PropertyGroup>

  <Import Project="../.nuget/NuGet.targets" />

  <Target Name="RestoreLocalPackages" DependsOnTargets="CheckPrerequisites">
    <Message Text="BuildTasksDll=$(BuildTasksDll)"/>
	<Message Text="RestartBuild=$(RestartBuild)"/>
    <Message Text="Configuration=$(Configuration)"/>
    <Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
	<Exec Command='$(NuGetCommand) install SIL.ReleaseTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)"' />
	<Exec Command='$(NuGetCommand) install SIL.libpalaso.l10ns -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
	<Exec Command='$(NuGetCommand) install NUnit.Extension.TeamCityEventListener -excludeVersion -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal"
      Properties="Configuration=$(Configuration)" Condition="$(RestartBuild)" />
  </Target>

  <UsingTask TaskName="StampAssemblies" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
  <UsingTask TaskName="UpdateBuildTypeFile" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
  <UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
  <UsingTask TaskName="Split" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
  <UsingTask TaskName="FileUpdate" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />
  <UsingTask TaskName="NUnit3" AssemblyFile="$(BuildTasksDll)" Condition="Exists('$(BuildTasksDll)')" />

  <Target Name="VersionNumbers">
	<Message Text="BUILD_NUMBER: $(BUILD_NUMBER)" Importance="high"/>

	<Split Input="$(BUILD_NUMBER)" Delimiter="." OutputSubString="2">
	  <Output TaskParameter="ReturnValue" PropertyName="BuildCounter" />
	</Split>

	<Message Text="BuildCounter: $(BuildCounter)" Importance="high"/>

	<!-- Note, after some thought, we've decided this is the best place to keep the version number (not on TeamCity, not in the assemblies).     -->
	<CreateProperty Value="3.7.$(BuildCounter)">
	  <Output PropertyName="Version" TaskParameter="Value"/>
	</CreateProperty>

	<Message Text="Version: $(Version)" Importance="high"/>
  </Target>

  <Import Project="$(SILReleaseTasksProps)" Condition="Exists('$(SILReleaseTasksProps)')" />

  <Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
	  <ItemGroup>
		<AssemblyInfoFiles Include="$(RootDir)/src/**/assemblyinfo.cs"/>
	  </ItemGroup>
	  <StampAssemblies Version="$(Version)" InputAssemblyPaths="@(AssemblyInfoFiles)" />
	</Target>

  <Target Name="SetBuildType" DependsOnTargets="VersionNumbers">

	  <Message Text="RELEASE_TYPE: $(RELEASE_TYPE)" Importance="high"/>

	  <ItemGroup>
		<BuildTypeFiles Include="$(RootDir)/src/**/BuildType.cs"/>
	  </ItemGroup>
	  <UpdateBuildTypeFile BuildType="$(RELEASE_TYPE)" BuildTypePaths="@(BuildTypeFiles)" />
	</Target>

  <Target Name="Build">
	<CallTarget Targets="RestoreLocalPackages"/>
	<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
  </Target>

  <Target Name="BuildInternal" DependsOnTargets="SetAssemblyVersion;SetBuildType">
	<MSBuild Projects="$(RootDir)/SayMore.sln"
			 Targets="Rebuild"
			 Properties="Configuration=$(Configuration)" />
	<Message Text="Build Complete"/>
  </Target>

  <Target Name="Test" DependsOnTargets ="Build">
	<ItemGroup>
	  <TestAssemblies Include="$(RootDir)/output/release/*Tests.dll;"/>
	</ItemGroup>
	<NUnit3 Condition="'$(teamcity_version)' == ''"
		Assemblies="@(TestAssemblies)"
		ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner.3.20.0/tools"
		ExcludeCategory="$(excludedCategories)"
		WorkingDirectory="$(RootDir)/output/$(Configuration)"
		Force32Bit="$(useNUnit-x86)"
		Verbose="true"
		OutputXmlFile="$(RootDir)/output/$(Configuration)/TestResults.xml"
		UseNUnit3Xml = "true"
		TeamCity="false"/>
	<NUnit3 Condition="'$(teamcity_version)' != ''"
		Assemblies="@(TestAssemblies)"
		ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner.3.20.0/tools"
		ExcludeCategory="SkipOnTeamCity,$(excludedCategories)"
		WorkingDirectory="$(RootDir)/output/$(Configuration)"
		Force32Bit="$(useNUnit-x86)"
		Verbose="true"
		TeamCity="true"/>
  </Target>

  <Target Name="UpdateDownloadInfo" DependsOnTargets="VersionNumbers" >

	<!-- copy download info files so we aren't modifying the originals,
		which then is a pain on dev machines -->
	<Copy SourceFiles ="$(RootDir)\src\installer\template.download_info"
		DestinationFiles ="$(RootDir)\output\installer\SayMoreInstaller.$(Version).download_info"/>
	<Copy SourceFiles ="$(RootDir)\src\template.releasenotes.download_info"
		DestinationFiles ="$(RootDir)\output\releasenotes.download_info"/>

	<!-- replace some parts of the files with the version number & date -->
	<FileUpdate File="$(RootDir)\output\installer\SayMoreInstaller.$(Version).download_info"
		DatePlaceHolder='_DATE_'
		DateFormat='yyyy-MM-dd'
		Regex='_VERSION_'
		ReplacementText ="$(Version)" />
	
	<FileUpdate File="$(RootDir)\output\releasenotes.download_info"
		DatePlaceHolder='_DATE_'
		DateFormat='yyyy-MM-dd'
		Regex='_VERSION_'
		ReplacementText ="$(Version)" />

  </Target>
  
  		
  <Target Name="ConvertReleaseNotesToHtml" DependsOnTargets="UpdateReleaseNotes">
	  <CreateReleaseNotesHtml ChangelogFile="$(RootDir)/DistFiles/releaseNotes.md"
	                          HtmlFile="$(RootDir)/output/ReleaseNotes.htm" />
  </Target>
  
  <Target Name="UpdateReleaseNotes" DependsOnTargets="VersionNumbers">
	<FileUpdate
		File="$(RootDir)/DistFiles/ReleaseNotes.md"
		DatePlaceHolder='_DATE_'
		DateFormat='d MMMM yyyy'
		Regex='_VERSION_'
		ReplacementText="$(Version)" />
  </Target>

  <Target Name="Installer" DependsOnTargets="VersionNumbers; UpdateDownloadInfo; MakeWixForDistFiles; Build ">

	<!-- set the version number in the installer configuration program.  Perhaps there's a way to just send in the variables rather than this brute-force
		changing of the script, but I haven't figured that out. -->

	<FileUpdate File="$(RootDir)\src\Installer\Installer.wxs" Regex='Property_ProductVersion = ".*"'
				ReplacementText ="Property_ProductVersion = &quot;$(Version)&quot;" />

	<Message Text="Making Installer Version: $(Version)" Importance="high"  />

	<MSBuild Projects="$(RootDir)\src\Installer\Installer.wixproj"/>

	<!-- remove an existing one with the same name, if necessary -->
	<Delete Files="$(RootDir)\output\installer\SayMoreInstaller.$(Version).msi" TreatErrorsAsWarnings="false" />

	<Exec Command='sign /d "SayMoreInstaller.$(Version).msi" "$(RootDir)\output\installer\SayMoreInstaller.msi"'></Exec>

	<Copy SourceFiles="$(RootDir)\output\installer\SayMoreInstaller.msi"
		  DestinationFiles="$(RootDir)\output\installer\SayMoreInstaller.$(Version).msi"
		  />
		  
	<!-- appcast.xml is used as part of the update notification system -->
	<Copy SourceFiles ="$(RootDir)\src\Installer\appcast.xml"
		DestinationFolder ="$(RootDir)\output\installer"/>

	<FileUpdate File="$(RootDir)\output\installer\appcast.xml"
		Regex='VERSION_NUMBER'
		ReplacementText ="$(Version)" />

	<!-- remove the installer which has no version number (wouldn't need this if the copy above was a move, instead) -->
	<Delete Files="$(RootDir)\output\installer\SayMoreInstaller.msi" TreatErrorsAsWarnings="false" />

  </Target>

  <!-- The "Installer" Target used to depend on this, but the Edolo Sample data was removed
       in version 3 of SayMore, so there is no need to continue to generate this WIX include
	   file. (See SampleData\ReadMe.txt)
  <Target Name="MakeWixForSampleData">
	<MakeDir ContinueOnError ="true" Directories ="$(RootDir)\output\Installer\"/>

	<MakeWixForDirTree
				DirectoryReferenceId="SampleDataDir"
				GiveAllPermissions="true"
				ComponentGroupId="SampleData"
				RootDirectory="$(RootDir)\SampleData"
				OutputFilePath="$(RootDir)\output\Installer\GeneratedSampleDataFiles.wxs"
				MatchRegExPattern=".*"
				>
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>
  </Target>
  -->

  <Target Name="copyLibL10ns" DependsOnTargets="RestoreLocalPackages">
	<Error Text="Palaso L10ns package missing. Expected at $(RootDir)/packages/SIL.libpalaso.l10ns"
		Condition="!Exists('$(RootDir)/packages/SIL.libpalaso.l10ns/SIL.libpalaso.l10ns.nupkg')" />
	<ItemGroup>
		<XliffFiles Include="$(RootDir)/packages/SIL.libpalaso.l10ns/content/**/*.xlf"/>
	</ItemGroup>
	  <Copy SourceFiles="@(XliffFiles)"
			DestinationFiles="@(XliffFiles->'$(RootDir)/DistFiles/%(Filename)%(Extension)')"
			SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="MakeWixForDistFiles" DependsOnTargets="copyLibL10ns">
	<MakeDir ContinueOnError ="true" Directories ="$(RootDir)\output\Installer\"/>
	
	<MakeWixForDirTree
				DirectoryReferenceId="ProgramDir"
					ComponentGroupId="DistFiles"
						RootDirectory="$(RootDir)\DistFiles"
				OutputFilePath="$(RootDir)\output\Installer\GeneratedDistFiles.wxs"
				MatchRegExPattern=".*"
				>
	  <!--what does this do?-->
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>
  </Target>
</Project>
